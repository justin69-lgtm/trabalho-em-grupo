O GitHub é uma plataforma baseada no Git para controle de versões e colaboração em projetos de desenvolvimento de software. Abaixo estão os principais comandos do Git, que são utilizados tanto no GitHub quanto no Git localmente (em seu computador), para gerenciar repositórios e colaborar com outras pessoas.

1. Comandos básicos do Git
git init
Inicializa um novo repositório Git no diretório atual. Cria o diretório .git para controle de versão.

git clone <url-do-repositorio>
Clona um repositório remoto (por exemplo, do GitHub) para o seu computador.

git add <arquivo>
Adiciona arquivos modificados à área de preparação (staging area) para o próximo commit. Pode usar git add . para adicionar todos os arquivos alterados.

git commit -m "mensagem"
Faz o commit das alterações na área de staging, com uma mensagem descritiva do que foi modificado.

git status
Mostra o estado atual do repositório: arquivos modificados, arquivos não rastreados, e a diferença entre o repositório local e o remoto.

git push
Envia as alterações locais (commits) para o repositório remoto (GitHub, por exemplo). Usado após o commit para sincronizar o repositório local com o remoto.

git pull
Atualiza o repositório local com as mudanças feitas no repositório remoto.

git fetch
Baixa as alterações do repositório remoto, mas não as aplica no seu repositório local até você usar git merge.

git merge <branch>
Mescla as alterações de uma branch (ramo) específica para a branch atual. Usado após fazer git fetch.

git branch
Lista as branches locais no repositório. Também pode ser usado com um nome para criar uma nova branch (git branch <nome-da-branch>).

git checkout <branch>
Alterna entre diferentes branches do seu repositório.

git log
Exibe o histórico de commits do repositório, mostrando informações sobre quem fez o commit, quando e qual foi a mensagem.

2. Comandos GitHub
git remote add origin <url-do-repositorio>
Associa um repositório remoto (no GitHub) ao repositório local. Isso permite que você faça push e pull para sincronizar os dados.

git push origin <branch>
Envia a branch local para o repositório remoto no GitHub. A primeira vez que você envia uma branch, é comum usar este comando para associá-la ao repositório remoto.

git pull origin <branch>
Baixa as alterações da branch remota para o repositório local.

3. Comandos para colaboração
git fork (no GitHub)
Cria uma cópia do repositório de outra pessoa na sua conta do GitHub, permitindo que você faça modificações sem afetar o repositório original.

git clone <url-do-seu-fork>
Clona o seu fork (cópia) de um repositório para o seu computador, permitindo que você trabalhe nas alterações localmente.

git pull request (no GitHub)
Após fazer alterações e enviar (push) para o seu repositório, você pode abrir um pull request para sugerir essas alterações no repositório original (ou base).

git rebase
Permite reescrever o histórico de commits, facilitando a incorporação de alterações de uma branch para outra de forma linear.

Esses são os principais comandos para trabalhar com Git e GitHub. O GitHub oferece funcionalidades adicionais como Issues, Pull Requests e Actions para automatizar fluxos de trabalho, mas os comandos Git são a base para qualquer operação de controle de versão.


Prefiro esta resposta

Ao enviar mensagens para o ChatGPT, você aceita nossos Termos e declara ter lido nossa Política de Privacidade.
Não compartilhe informações confidenciais. Os chats podem ser revisados e usados para treinar nossos modelos. Saiba mais


ChatGPT pode cometer erros. Considere verificar informações importantes.
